import{d as e}from"./app.ea66aa66.js";const t={},n=e('<p>###EventBus事件总线</p><p>原生开发中，时常遇到通知或广播机制，应对需要跨页面的事件通知。作为移动端跨平台框架的Flutter而已，也有同样的解决方案-EventBus，event_bus提供事件总线功能来实现一些状态的更新，核心是基于Dart Streams（流）；事件总线通常实现了订阅者模式，订阅者模式包含发布者和订阅者两种角色，可以通过事件总线来触发事件和监听事件，下面来通过更改主题颜色的案例认识下event_bus。</p><h4 id="_1-集成插件" tabindex="-1"><a class="header-anchor" href="#_1-集成插件" aria-hidden="true">#</a> 1 集成插件</h4><p>在pubspec.yaml文件中添加event_bus，当前版本1.1.1</p><div class="language-text ext-text"><pre class="language-text"><code>event_bus: ^1.1.0\n</code></pre></div><p>在使用的地方import</p><div class="language-text ext-text"><pre class="language-text"><code>import &#39;package:asset_pickers/asset_pickers.dart&#39;;\n</code></pre></div><p>####2 创建EventBus 通常每个应用程序只有一个事件总线，但可以设置多个事件总线以对一组特定事件进行分组。新建event_bus.dart类，在类中创建EventBus实例，并使其能够在其他类中被使用，并定义了ThemeEvent通知修改主题样式的事件</p><div class="language-text ext-text"><pre class="language-text"><code>import &#39;package:event_bus/event_bus.dart&#39;;\n\nEventBus eventBus = EventBus();\n\nenum ThemeModel {\n  light, // 浅色\n  dark, // 深色\n}\n\nclass ThemeEvent {\n  ThemeModel model = ThemeModel.light;\n\n  ThemeEvent(this.model);\n}\n</code></pre></div><h4 id="_3-注册订阅者" tabindex="-1"><a class="header-anchor" href="#_3-注册订阅者" aria-hidden="true">#</a> 3 注册订阅者</h4><p>下面我们在main.dart中，注册订阅者，收到修改模式的通知后，处理样式更改逻辑，多个页面同样处理。</p><div class="language-text ext-text"><pre class="language-text"><code>@override\n  void initState() {\n    super.initState();\n    _themeModelscription = eventBus.on&lt;ThemeEvent&gt;().listen((event) {\n      setState(() {\n        color = event.model == ThemeModel.light\n            ? Color(0xfff5f5f5)\n            : Color(0xff000000);\n      });\n    });\n  }\n</code></pre></div><h4 id="_4-触发订阅通知" tabindex="-1"><a class="header-anchor" href="#_4-触发订阅通知" aria-hidden="true">#</a> 4 触发订阅通知</h4><p>在需要触发的地方，调用下面方法，即可通知到已订阅该类型通知指出相应逻辑。</p><div class="language-text ext-text"><pre class="language-text"><code>eventBus.fire(ThemeEvent(model));\n</code></pre></div><h4 id="_5-解除订阅" tabindex="-1"><a class="header-anchor" href="#_5-解除订阅" aria-hidden="true">#</a> 5 解除订阅</h4><p>所涉及的订阅者在生命周期结束前，需要解除订阅，防止内存泄漏。</p><div class="language-text ext-text"><pre class="language-text"><code>void dispose() {\n    super.dispose();\n    //取消订阅\n    _themeModelscription.cancel();\n  }\n</code></pre></div><p>1.案例github地址：https://github.com/Qson8/event_bus_demo 2.event_bus插件地址：https://pub.dev/packages/event_bus</p>',19);t.render=function(e,t){return n};export default t;
