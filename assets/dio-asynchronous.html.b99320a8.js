import{o as n,c as s,a,F as t,d as p}from"./app.ea66aa66.js";const o={},c=p('<p>Dart类库有非常多的返回Future 或者 Stream 对象的函数，这些函数被称为异步函数，它们只会被设置好一些好事操作之后返回，如IO操作。</p><p>async 和 await 关键词支持异步编程</p><h2 id="future" tabindex="-1"><a class="header-anchor" href="#future" aria-hidden="true">#</a> Future</h2><p>用于处理异步操作，异步处理成功了就执行成功的操作，异步处理失败就捕获错误或者停止后续操作，一个Future只会对应一个结果，要么成功，要么失败。</p><p>Future的所有API的返回值仍然是一个<strong>Future对象</strong>，所以可以很方便的进行链式调用。</p><h4 id="future-then" tabindex="-1"><a class="header-anchor" href="#future-then" aria-hidden="true">#</a> Future.then</h4><p>模拟延时操作 <code>then</code>中接收异步结果并打印结果</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token string">&quot;hi world!&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="future-catcherror" tabindex="-1"><a class="header-anchor" href="#future-catcherror" aria-hidden="true">#</a> Future.catchError</h4><p>如果异步任务发生错误，可以在<code>catchError</code>中捕获错误，</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token comment">//return &quot;hi world!&quot;;</span>\n   <span class="token keyword">throw</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token comment">//执行成功会走到这里  </span>\n   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token comment">//执行失败会走到这里  </span>\n   <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>then 接收结果，catchError铺货异常，但并非只有catchError回调才能铺货错误，then方法还有一个可选参数onError，也可以铺货异常</p><h4 id="future-whencomplete" tabindex="-1"><a class="header-anchor" href="#future-whencomplete" aria-hidden="true">#</a> Future.whenComplete</h4><p>无论异步任务执行成功或失败都需要做一些事时，</p><ol><li>可以分别在 <code>then</code> 或 <code>catchError </code>中关闭以下对话框</li><li>可以使用Future的whenComplete回调</li></ol><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token comment">//return &quot;hi world!&quot;;</span>\n   <span class="token keyword">throw</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token comment">//执行成功会走到这里 </span>\n   <span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token comment">//执行失败会走到这里   </span>\n   <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token comment">//无论成功或失败都会走到这里</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="future-wait" tabindex="-1"><a class="header-anchor" href="#future-wait" aria-hidden="true">#</a> Future.wait</h4><p>如果需要等待多个异步任务都执行结束后做某些操作，可以使用Future.wait,它接受一个Future数组参数，</p><ul><li>只有数组中所有的Future都执行成功后，才会触发then的成功回调，</li><li>只要有一个Future执行失败，就会触发错误回调</li></ul><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token comment">// 2秒后返回结果  </span>\n  <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// 4秒后返回结果  </span>\n  <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot; world&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token function">print</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="使用async-await消除callback-hell" tabindex="-1"><a class="header-anchor" href="#使用async-await消除callback-hell" aria-hidden="true">#</a> 使用async/await消除callback hell</h2><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n   <span class="token keyword">try</span><span class="token punctuation">{</span>\n    <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token string">&quot;alice&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;******&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> userInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> <span class="token function">saveUserInfo</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//执行接下来的操作   </span>\n   <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">//错误处理   </span>\n    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   \n   <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre></div><p><code>async</code>用来表示函数时异步，定义的函数会返回一个Future对象 <code>await</code>后面是一个Future，表示等待该异步任务完成，异步完成后才会往下走，await必须出现在async函数内部 async/await只是一个语法糖，编译器或解释器最终会将其转化为一个Promise(Future)的调用链。</p><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h2><p>Stream也是用于接收异步事件数据，和Future不同的是，它可以接收多个异步操作的结果（成功或失败），也就是说，在执行异步任务时，可以通过多次触发成功或失败事件来传递结果数据或错误异常，Stream常用于会多次读取数据的异步任务场景，如网络内容下载，文档读写等</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">fromFutures</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token comment">// 1秒后返回结果</span>\n  <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;hello 1&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// 抛出一个异常</span>\n  <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// 3秒后返回结果</span>\n  <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;hello 3&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> onError<span class="token punctuation">:</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>onDone<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>上面的代码依次输出</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">I</span><span class="token operator">/</span>flutter <span class="token punctuation">(</span><span class="token number">17666</span><span class="token punctuation">)</span><span class="token punctuation">:</span> hello <span class="token number">1</span>\n<span class="token class-name">I</span><span class="token operator">/</span>flutter <span class="token punctuation">(</span><span class="token number">17666</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Error</span>\n<span class="token class-name">I</span><span class="token operator">/</span>flutter <span class="token punctuation">(</span><span class="token number">17666</span><span class="token punctuation">)</span><span class="token punctuation">:</span> hello <span class="token number">3</span>\n</code></pre></div><h2 id="网络请求-future应用" tabindex="-1"><a class="header-anchor" href="#网络请求-future应用" aria-hidden="true">#</a> 网络请求 Future应用</h2><p>异步最应用在网络请求，Flutter同样需要异步请求获取数据，<code>dio</code>是Flutter常用的网络请求插件，可以到pub.dev搜索查看。 同样项目中引入改插件，直接在<code>pubspec.yaml</code>文件中添加依赖</p>',30),e=a("p",null,"在使用的地方引入：",-1),u=p('<p>下面是项目中封装的请求通用类BaseRepository</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token comment">/// 网络请求</span>\n<span class="token keyword">class</span> <span class="token class-name">BaseRepository</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> queryParams<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> nativeD <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Bridge</span><span class="token punctuation">.</span><span class="token function">getNetComParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> dio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> nativeParams <span class="token operator">=</span> <span class="token class-name">ValueUtil</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>nativeD<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>baseUrl <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;baseUrl&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;sbtype&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;sbtype&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;sbID&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;sbID&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;version&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;version&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token class-name">ResponseType</span><span class="token punctuation">.</span>json<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>queryParams<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&#39;domain_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      queryParams<span class="token punctuation">[</span><span class="token string">&#39;domain_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;domain_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n        url<span class="token punctuation">:</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;baseUrl&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> url<span class="token punctuation">,</span>\n        queryParams<span class="token punctuation">:</span> queryParams<span class="token punctuation">,</span>\n        header<span class="token punctuation">:</span> nativeParams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> queryParameters<span class="token punctuation">:</span> queryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string">&#39;请求数据返回:\\n$response&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">rethrow</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token class-name">Map</span> params<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> nativeParams <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Bridge</span><span class="token punctuation">.</span><span class="token function">getNetComParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> dio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>baseUrl <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;baseUrl&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;sbtype&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;sbtype&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;sbID&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;sbID&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;version&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;version&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token class-name">ResponseType</span><span class="token punctuation">.</span>json<span class="token punctuation">;</span>\n    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n        url<span class="token punctuation">:</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;baseUrl&#39;</span><span class="token punctuation">]</span> <span class="token operator">+</span> url<span class="token punctuation">,</span>\n        queryParams<span class="token punctuation">:</span> params<span class="token punctuation">,</span>\n        header<span class="token punctuation">:</span> nativeParams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>params<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&#39;domain_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      params<span class="token punctuation">[</span><span class="token string">&#39;domain_id&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;domain_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">:</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string">&#39;请求数据返回:\\n$response&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">rethrow</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> method<span class="token punctuation">,</span>\n      <span class="token punctuation">{</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> queryParams<span class="token punctuation">,</span> <span class="token class-name">Map</span> header<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">debugPrint</span><span class="token punctuation">(</span>\n        <span class="token string">&#39;\\nurl: $url  method: $method\\nheader: $header \\nparams: $queryParams\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>dio相关设置</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token number">1.</span> 创建dio对象<span class="token punctuation">:</span> <span class="token keyword">var</span> dio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token number">2.</span> 设置baseUrl<span class="token punctuation">:</span> dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>baseUrl <span class="token operator">=</span> <span class="token string">&#39;baseUrl&#39;</span><span class="token punctuation">;</span>\n<span class="token number">3.</span> 设置请求头<span class="token punctuation">:</span> \n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;sbtype&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;sbtype&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;sbID&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;sbID&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;version&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;version&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> nativeParams<span class="token punctuation">[</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token number">4.</span> 请求方式<span class="token punctuation">:</span> dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token class-name">ResponseType</span><span class="token punctuation">.</span>json<span class="token punctuation">;</span>\n<span class="token number">5.</span> 设置contentType<span class="token punctuation">:</span> dio<span class="token punctuation">.</span>options<span class="token punctuation">.</span>contentType <span class="token operator">=</span>\n        <span class="token class-name">ContentType</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token number">6.</span> 发送请求<span class="token punctuation">:</span> \n    <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">await</span> dio<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">:</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string">&#39;请求数据返回:\\n$response&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>\n</code></pre></div>',4);o.render=function(p,o){return n(),s(t,null,[c,a("img",{src:p.$withBase("/flutter/dio-asynchronous/Future-Dio-asynchronous-png1.png"),alt:"https://img01.jituwang.com/171030/256786-1G030214S965.jpg"},null,8,["src"]),e,a("img",{src:p.$withBase("/flutter/dio-asynchronous/Future-Dio-asynchronous-png2.png"),alt:"https://img01.jituwang.com/171030/256786-1G030214S965.jpg"},null,8,["src"]),u],64)};export default o;
