import{o as n,c as s,a,F as t,d as p}from"./app.ea66aa66.js";const o={},e=p('<blockquote><p>Dart是Flutter开发语言，学习一门技术，首先要从开发语言开始。本篇开始从开发语言开始，目的是为0基本的朋友能更方便的了解这门开发语言，同时有开发基本的也可以作为笔记查看。</p></blockquote><h4 id="语言特性" tabindex="-1"><a class="header-anchor" href="#语言特性" aria-hidden="true">#</a> 语言特性</h4><p>Dart官网：http://www.dartdoc.cn</p><p>Dart是一门面向对象的开发语言，所有的对象都继承自Object类， 包括数字numbers、函数function、null也都是对象。</p><p>Dart和Object-C一样也具有动态类型语言特性, 尽量给变量定义一个类型，会更安全，没有显示定义类型的变量在 debug 模式下会类型会是 dynamic(动态的)。</p><p>Dart 在 running 之前解析你的所有代码，指定数据类型和编译时的常量，可以提高运行速度。</p><p>Dart中的类和接口是统一的，类即接口，你可以继承一个类，也可以实现一个类（接口），自然也包含了良好的面向对象和并发编程的支持。</p><p>Dart 提供了顶级函数(如：main())，俗称入口函数。</p><p>Dart 和java不一样，没有 public、private、protected 这些关键字，变量名以&quot;_&quot;开头意味着对它的 lib 是私有的。</p><p>没有初始化的变量都会被赋予默认值 null。</p><p>编程语言并不是孤立存在的，Dart也是这样，他由<strong>语言规范</strong>、<strong>虚拟机</strong>、<strong>类库</strong>和<strong>工具</strong>等组成：</p><ul><li>SDK：SDK 包含 Dart VM、dart2js、Pub、库和工具。</li><li>Dartium：内嵌 Dart VM 的 Chromium ，可以在浏览器中直接执行 dart 代码。</li><li>Dart2js：将 Dart 代码编译为 JavaScript 的工具。</li><li>Dart Editor：基于 Eclipse 的全功能 IDE，并包含以上所有工具。支持代码补全、代码导航、快速修正、重构、调试等功能。</li></ul><h4 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h4>',13),c=p('<p>新运算符</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token punctuation">.</span><span class="token punctuation">.</span>（级联运算符）和 <span class="token operator">?</span><span class="token punctuation">.</span>（条件成员访问运算符）以及 <span class="token operator">?</span><span class="token operator">?</span>（判空赋值运算符<span class="token punctuation">)</span>\n<span class="token operator">?</span><span class="token punctuation">.</span>   如 <span class="token class-name">Test</span><span class="token operator">?</span><span class="token punctuation">.</span>funs 从表达式<span class="token class-name">Test</span>中选择属性funs，除非<span class="token class-name">Test</span>为空（当<span class="token class-name">Test</span>为空时，<span class="token class-name">Test</span><span class="token operator">?</span><span class="token punctuation">.</span>funs的值为空<span class="token punctuation">)</span>\n\n<span class="token operator">as</span>  类型转换 <span class="token punctuation">(</span>确定是指定类型时才可以使用<span class="token operator">as</span>转换类型<span class="token punctuation">)</span>\n<span class="token operator">is</span>  如果对象具有指定的类型，则为<span class="token boolean">true</span>\n<span class="token operator">is!</span> 对象不是某个类型\n</code></pre></div><h4 id="变量与常量" tabindex="-1"><a class="header-anchor" href="#变量与常量" aria-hidden="true">#</a> 变量与常量</h4><p><strong>var</strong> Dart是强类型语言. 当var声明一个变量后，Dart在编译时会根据第一次赋值数据的类型类推断其类型。编译完成后其类型就已经被确定。</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">Dart</span>中的<span class="token keyword">var</span>变量一旦赋值，类型遍会确定，则不能再改变其类型。\n\n<span class="token keyword">var</span> t<span class="token punctuation">;</span>\nt<span class="token operator">=</span><span class="token string">&quot;hi world&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// 下面代码在dart中会报错，因为变量t的类型已经确定为String，</span>\n<span class="token comment">// 类型一旦确定后则不能再更改其类型。</span>\nt<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-dart ext-dart"><pre class="language-dart"><code>整型\n\n<span class="token function">num</span><span class="token punctuation">(</span>int <span class="token punctuation">,</span> double<span class="token punctuation">)</span> \n运算符  <span class="token operator">/</span> <span class="token punctuation">(</span>除完的结果是浮点型<span class="token punctuation">)</span>   <span class="token operator">~/</span> 取整<span class="token punctuation">(</span>除完后取整<span class="token punctuation">)</span>\n</code></pre></div><p><strong>字符串</strong></p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">String</span> str <span class="token operator">=</span> ‘ <span class="token class-name">Hello</span>’\n<span class="token function">print</span><span class="token punctuation">(</span>str <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 字符串变量 * 5 表示把变量值拼接了5次返回 </span>\n\n</code></pre></div><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token number">1.</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">2.</span> <span class="token function">cusString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">3.</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">4.</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">5.</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">6.</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">7.</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">8.</span> <span class="token function">trimLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">9.</span> <span class="token function">trimRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">10.</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token number">11.</span> <span class="token function">replaceXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre></div><p><strong>三个单引号</strong> 或 <strong>三个双引号</strong></p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;&#39;Hello\n                  Dart&#39;&#39;&#39;</span><span class="token punctuation">;</span>\n                  \n<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>&quot;<span class="token class-name">Hello</span>\n                  <span class="token class-name">Dart</span>&quot;””<span class="token punctuation">;</span>\n\n</code></pre></div><p>使用 <strong>r</strong> 创建原始字符串</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">r&#39;Hello \\n Dart&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;\\n&quot;不会被转义</span>\n</code></pre></div><p><strong>单引号里面嵌套单引号</strong>，或者<strong>双引号里面嵌套双引号</strong>，必须在前面加反斜杠</p>',14),l=p('<p><strong>List(数组)</strong></p><div class="language-dart ext-dart"><pre class="language-dart"><code>创建<span class="token class-name">List</span>：<span class="token keyword">var</span> list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n创建不可变的<span class="token class-name">List</span>：<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n构造创建：<span class="token keyword">var</span> list<span class="token operator">=</span><span class="token keyword">new</span>  <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n常用操作\n</code></pre></div><p><strong>Map 字典</strong></p><div class="language-dart ext-dart"><pre class="language-dart"><code>创建不可变的map\n<span class="token class-name">List</span>：<span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span>”<span class="token number">123</span>”<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span>”<span class="token number">456</span>”<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>赋值运算符</strong></p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span>  \nb <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 表示左侧变量为空时进行赋值，否则不赋值</span>\n</code></pre></div><p><strong>表达式</strong></p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token operator">?</span><span class="token operator">?</span> \n运算符 expr1 <span class="token operator">?</span><span class="token operator">?</span> expr2<span class="token comment">// 意思第一个表达式expr1不为空，则直接使用expr1，如果为空，则使用expr2；</span>\n</code></pre></div><p><strong>插值表达式</strong> : ${expression}</p><p>使用 ${ } 表示插件表达式，单个变量可省略 { }。</p><div class="language-dart ext-dart"><pre class="language-dart"><code>int a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nint b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; a + b = ${a + b} &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 a + b = 3</span>\n<span class="token function">print</span><span class="token punctuation">(</span>“ a <span class="token operator">=</span> $b”<span class="token punctuation">)</span><span class="token punctuation">;</span> 等同于 <span class="token function">print</span><span class="token punctuation">(</span>“ a <span class="token operator">=</span> $<span class="token punctuation">{</span>b<span class="token punctuation">}</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可以省略大括号</span>\n</code></pre></div><p><strong>可选参数</strong></p><div class="language-dart ext-dart"><pre class="language-dart"><code>可选参数基于名称<span class="token punctuation">{</span><span class="token punctuation">}</span>\n可选命名参数：<span class="token punctuation">{</span>param1<span class="token punctuation">,</span>param2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>\n\n可选参数基于位置<span class="token punctuation">[</span><span class="token punctuation">]</span>\n可选命名参数：<span class="token punctuation">[</span>param1<span class="token punctuation">,</span>param2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>\n</code></pre></div><p><strong>dynamic</strong> 和 **Object ** Dynamic和Object与var功能相似，都会在赋值时自动进行类型推断，不同在于，赋值后可以改变类型。</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token keyword">dynamic</span> t<span class="token punctuation">;</span>\nt<span class="token operator">=</span><span class="token string">&quot;hi world&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">//下面代码没有问题</span>\nt<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>final</strong> 和 <strong>const</strong> 如果未打算更改一个变量，那么使用final 或 const，不是var ， 也不是一个类型， 一个final变量只能被设置一次， 两者区别在于：const变量是一个编译时常量，final变量在第一次使用时被初始化，被final或const修饰的变量，变量类型可以省略，类型根据值而定，如：</p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token comment">//可以省略String这个类型声明</span>\n<span class="token keyword">final</span> str <span class="token operator">=</span> <span class="token string">&quot;hi world&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">//final String str = &quot;hi world&quot;; </span>\n<span class="token keyword">const</span> str1 <span class="token operator">=</span> <span class="token string">&quot;hi world&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">//const String str1 = &quot;hi world&quot;;</span>\n</code></pre></div><p>final 的值只能被设定一次。 const 是一个编译时的常量，可以通过 const 来创建常量值，var c=const[];，这里 c 还是一个变量，只是被赋值了一个常量值，它还是可以赋其它值。实例变量可以是 final，但不能是 const。</p><p><strong>级联操作</strong></p><div class="language-dart ext-dart"><pre class="language-dart"><code><span class="token comment">// 使用 .. 级联操作 可对同一对象执行一系列操作</span>\n<span class="token class-name">Dio</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>baseUrl <span class="token operator">=</span> <span class="token string">&#39;http://app4.jinriaozhou.com/&#39;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>connectTimeout <span class="token operator">=</span> <span class="token number">500</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>receiveTimeout <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>\n</code></pre></div>',20);o.render=function(p,o){return n(),s(t,null,[e,a("img",{src:p.$withBase("/flutter/dart_introduction/operator.jpg"),alt:"https://img01.jituwang.com/171030/256786-1G030214S965.jpg"},null,8,["src"]),c,a("img",{src:p.$withBase("/flutter/dart_introduction/F2ED24C2-F022-4922-8240-B3E7C5FE638E.png"),alt:"https://img01.jituwang.com/171030/256786-1G030214S965.jpg"},null,8,["src"]),l],64)};export default o;
