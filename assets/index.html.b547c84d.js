import{r as s,o as a,c as n,a as e,F as t,d as p,b as o}from"./app.ea66aa66.js";const r={},c=p('<h2 id="借助vapor工具-使用swift搭建api接口" tabindex="-1"><a class="header-anchor" href="#借助vapor工具-使用swift搭建api接口" aria-hidden="true">#</a> 借助Vapor工具 使用Swift搭建api接口</h2><div class="language-text ext-text"><pre class="language-text"><code>以下是利用vapor框架，将swift写的api项目部署到后台云服务器中，总结的步骤，每台机器环境不一样，仅供参考。\n</code></pre></div><h2 id="vapor-and-swift" tabindex="-1"><a class="header-anchor" href="#vapor-and-swift" aria-hidden="true">#</a> vapor and swift</h2><p>mysql | nginx | psql | swiftenv |</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update \n$ <span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade\n$ <span class="token builtin class-name">eval</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -sL https://apt.vapor.sh<span class="token variable">)</span></span>&quot;</span>\n$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> swift vapor\n$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx\n$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> supervisor\n</code></pre></div><h2 id="配置域名解析" tabindex="-1"><a class="header-anchor" href="#配置域名解析" aria-hidden="true">#</a> 配置域名解析</h2><p>A --- api.xxx.com</p>',7),l={id:"nginx",tabindex:"-1"},i=e("a",{class:"header-anchor",href:"#nginx","aria-hidden":"true"},"#",-1),d=o(),u={href:"https://docs.vapor.codes/2.0/deploy/nginx/",target:"_blank",rel:"noopener noreferrer"},v=o("nginx"),k=p('<div class="language-nginx ext-nginx"><pre class="language-nginx"><code>\n<span class="token comment"># /etc/nginx/site-avaliables/default</span>\n<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>\n    <span class="token directive"><span class="token keyword">server_name</span> hello.com</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">root</span> /home/vapor/Hello/Public/</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> @proxy</span><span class="token punctuation">;</span>\n    <span class="token directive"><span class="token keyword">location</span> @proxy</span> <span class="token punctuation">{</span>\n        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8080</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">proxy_pass_header</span> Server</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">proxy_pass_header</span> Server</span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">proxy_connect_timeout</span> <span class="token number">3s</span></span><span class="token punctuation">;</span>\n        <span class="token directive"><span class="token keyword">proxy_read_timeout</span> <span class="token number">10s</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>sudo service nginx stop\nsudo service nginx start\nsudo service nginx restart\n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>【注意】如果nginx端口等相关配置更改了，需要执行以上3句命令 ，如果8080端口配置出错，可以改用其他端口，Swift项目中也相应修改\n</code></pre></div>',3),g={id:"supervisor",tabindex:"-1"},x=e("a",{class:"header-anchor",href:"#supervisor","aria-hidden":"true"},"#",-1),h=o(),f={href:"https://docs.vapor.codes/2.0/deploy/supervisor/",target:"_blank",rel:"noopener noreferrer"},b=o("Supervisor"),w=p('<p>/etc/supervisor/conf.d/</p><div class="language-text ext-text"><pre class="language-text"><code>\n[program:hello]\ncommand=/home/vapor/hello/.build/release/Run serve --env=production\ndirectory=/home/vapor/hello/\nuser=www-data\nstdout_logfile=/var/log/supervisor/%(program_name)-stdout.log\nstderr_logfile=/var/log/supervisor/%(program_name)-stderr.log\n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>supervisorctl reread\nsupervisorctl add hello\nsupervisorctl start hello\n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>【注意】  如果执行$supervisorctl start hello后报错，“supervisor: child process was not spawned” ，\n可以通过下面的命令来处理\n\n备用命令\nsudo supervisorctl stop all\nsudo supervisorctl reread\nsudo supervisorctl reload\nsudo supervisorctl start all\nsudo supervisorctl restart api (备注：刷新api配置，api替换成你自己的)\n\n\n</code></pre></div><h4 id="接口修改上线流程" tabindex="-1"><a class="header-anchor" href="#接口修改上线流程" aria-hidden="true">#</a> 接口修改上线流程</h4><p>本案例通过git管理代码，在后端ubuntu系统项目路径拉取最新最新代码，</p><div class="language-text ext-text"><pre class="language-text"><code>git pull\n</code></pre></div><p>项目路径下，通过vapor编译成release包</p><div class="language-text ext-text"><pre class="language-text"><code>vapor build --release\n</code></pre></div><p>如&#39;/home/ubuntu/QsonAppApi/.build/release/Run&#39;，后面会对Run进行访问，涉及权限问题，需要给Run设置权限，避免后续因权限问题报错</p><div class="language-text ext-text"><pre class="language-text"><code>sudo chmod a+x /home/ubuntu/QsonAppApi/.build/release/Run\n</code></pre></div><p>然后执行supervisorctl相关命令，步骤常驻后台设置</p><p>刷新</p><div class="language-text ext-text"><pre class="language-text"><code>sudo supervisorctl restart api\n</code></pre></div><p>其他说明： <code>cat /etc/supervisor/conf.d/api.conf</code> 可以查看supervisor接口相关配置,也可把‘user=www-data’去掉</p>',15),m=o("本帖引用自 "),y={href:"https://github.com/OHeroJ",target:"_blank",rel:"noopener noreferrer"},_=o("OHeroJ"),$=o(" 的 原创帖 "),R={href:"https://juejin.im/post/5d3196fcf265da1ba84acb31",target:"_blank",rel:"noopener noreferrer"},A=o("Vapor3系列之hello小项目从0到部署上线");r.render=function(p,o){const r=s("OutboundLink");return a(),n(t,null,[c,e("h2",l,[i,d,e("a",u,[v,e(r)])]),k,e("h2",g,[x,h,e("a",f,[b,e(r)])]),w,e("p",null,[m,e("a",y,[_,e(r)]),$,e("a",R,[A,e(r)])])],64)};export default r;
